;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 17/05/2016 8:06:18
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF47  	GOTO        142
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_SPI1_Init:
;__Lib_SPI_c345.c,23 :: 		
;__Lib_SPI_c345.c,24 :: 		
0x001C	0x0EFF      	MOVLW       _SPI1_Read
0x001E	0x6E15      	MOVWF       _SPI_Rd_Ptr 
0x0020	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x0022	0x6E16      	MOVWF       _SPI_Rd_Ptr+1 
0x0024	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x0026	0x6E17      	MOVWF       _SPI_Rd_Ptr+2 
0x0028	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x002A	0x6E18      	MOVWF       _SPI_Rd_Ptr+3 
;__Lib_SPI_c345.c,25 :: 		
0x002C	0x0E4C      	MOVLW       _SPI1_Write
0x002E	0x6E19      	MOVWF       _SPI_Wr_Ptr 
0x0030	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x0032	0x6E1A      	MOVWF       _SPI_Wr_Ptr+1 
0x0034	0x0E21      	MOVLW       FARG_SPI1_Write_data_
0x0036	0x6E1B      	MOVWF       _SPI_Wr_Ptr+2 
0x0038	0x0E00      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x003A	0x6E1C      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_c345.c,27 :: 		
0x003C	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345.c,28 :: 		
0x003E	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;__Lib_SPI_c345.c,29 :: 		
0x0040	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345.c,31 :: 		
0x0042	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_c345.c,32 :: 		
0x0044	0x0E40      	MOVLW       64
0x0046	0x6EC7      	MOVWF       SSPSTAT 
;__Lib_SPI_c345.c,33 :: 		
0x0048	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_c345.c,35 :: 		
L_end_SPI1_Init:
0x004A	0x0012      	RETURN      0
; end of _SPI1_Init
_SPI1_Write:
;__Lib_SPI_c345.c,76 :: 		
;__Lib_SPI_c345.c,79 :: 		
0x004C	0xFFC9C021  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,80 :: 		
L_SPI1_Write8:
0x0050	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0052	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345.c,81 :: 		
0x0054	0x0000      	NOP
0x0056	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,82 :: 		
0x0058	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,84 :: 		
L_end_SPI1_Write:
0x005C	0x0012      	RETURN      0
; end of _SPI1_Write
_DAC_Output:
;programa 15b.c,19 :: 		void DAC_Output(unsigned int valueDAC) {
;programa 15b.c,22 :: 		Chip_Select = 0;                       // Seleccciona el DAC
0x005E	0x9082      	BCF         RC0_bit, BitPos(RC0_bit+0) 
;programa 15b.c,25 :: 		temp = (valueDAC >> 8) & 0x0F;         // Guarda valueDAC[11..8] a temp[3..0]
0x0060	0xF000C020  	MOVFF       FARG_DAC_Output_valueDAC+1, R0
0x0064	0x6A01      	CLRF        R1 
0x0066	0x0E0F      	MOVLW       15
0x0068	0x1400      	ANDWF       R0, 0 
0x006A	0x6E21      	MOVWF       FARG_SPI1_Write_data_ 
;programa 15b.c,26 :: 		temp |= 0x30;                          // Define la configuración del DAC, ver el datasheet del MCP4921
0x006C	0x0E30      	MOVLW       48
0x006E	0x1221      	IORWF       FARG_SPI1_Write_data_, 1 
;programa 15b.c,27 :: 		SPI1_Write(temp);                      // Envía el byte mas significativo por el SPI
0x0070	0xDFED      	RCALL       _SPI1_Write
;programa 15b.c,31 :: 		SPI1_Write(temp);                      // Envía el byte menos significativo por el SPI
0x0072	0xF021C01F  	MOVFF       FARG_DAC_Output_valueDAC, FARG_SPI1_Write_data_
0x0076	0xDFEA      	RCALL       _SPI1_Write
;programa 15b.c,33 :: 		Chip_Select = 1;                       // Deselecciona el DAC
0x0078	0x8082      	BSF         RC0_bit, BitPos(RC0_bit+0) 
;programa 15b.c,34 :: 		}
L_end_DAC_Output:
0x007A	0x0012      	RETURN      0
; end of _DAC_Output
_InitMain:
;programa 15b.c,8 :: 		void InitMain() {
;programa 15b.c,9 :: 		TRISB0_bit = 1;                        // Pone el pin RA0 como entrada
0x007C	0x8093      	BSF         TRISB0_bit, BitPos(TRISB0_bit+0) 
;programa 15b.c,10 :: 		TRISB1_bit = 1;                        // Pone el pin RA1 como entrada
0x007E	0x8293      	BSF         TRISB1_bit, BitPos(TRISB1_bit+0) 
;programa 15b.c,11 :: 		ADCON1=0x0F;
0x0080	0x0E0F      	MOVLW       15
0x0082	0x6EC1      	MOVWF       ADCON1 
;programa 15b.c,12 :: 		Chip_Select = 1;                       // Deseleciona el DAC
0x0084	0x8082      	BSF         RC0_bit, BitPos(RC0_bit+0) 
;programa 15b.c,13 :: 		Chip_Select_Direction = 0;             // Pone el pin CS# como salida
0x0086	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;programa 15b.c,14 :: 		NOT_RBPU_bit=0;                        // Habilita las resistencias de pull up
0x0088	0x9EF1      	BCF         NOT_RBPU_bit, BitPos(NOT_RBPU_bit+0) 
;programa 15b.c,15 :: 		SPI1_Init();                           // Inicializa el módulo SPI
0x008A	0xDFC8      	RCALL       _SPI1_Init
;programa 15b.c,16 :: 		}
L_end_InitMain:
0x008C	0x0012      	RETURN      0
; end of _InitMain
_main:
;programa 15b.c,36 :: 		void main() {
;programa 15b.c,38 :: 		InitMain();                            // Realiza la inicializacion principal
0x008E	0xDFF6      	RCALL       _InitMain
;programa 15b.c,40 :: 		value = 2048;                          // Cuando el programa empieza, DAC posee
0x0090	0x0E00      	MOVLW       0
0x0092	0x6E1D      	MOVWF       _value 
0x0094	0x0E08      	MOVLW       8
0x0096	0x6E1E      	MOVWF       _value+1 
;programa 15b.c,43 :: 		while (1) {                             // Lazo  infinito
L_main0:
;programa 15b.c,45 :: 		if ((!RB0_bit) && (value < 4095)) {   // Si RA0 es precionado
0x0098	0xB081      	BTFSC       RB0_bit, BitPos(RB0_bit+0) 
0x009A	0xD009      	BRA         L_main4
0x009C	0x0E0F      	MOVLW       15
0x009E	0x5C1E      	SUBWF       _value+1, 0 
0x00A0	0xE102      	BNZ         L__main15
0x00A2	0x0EFF      	MOVLW       255
0x00A4	0x5C1D      	SUBWF       _value, 0 
L__main15:
0x00A6	0xE203      	BC          L_main4
L__main11:
;programa 15b.c,46 :: 		value++;                           //   incrementa el valor
0x00A8	0x4A1D      	INFSNZ      _value, 1 
0x00AA	0x2A1E      	INCF        _value+1, 1 
;programa 15b.c,47 :: 		}
0x00AC	0xD00E      	BRA         L_main5
L_main4:
;programa 15b.c,49 :: 		if ((!RB1_bit) && (value > 0)) {    // If RA1 es precionado
0x00AE	0xB281      	BTFSC       RB1_bit, BitPos(RB1_bit+0) 
0x00B0	0xD00C      	BRA         L_main8
0x00B2	0x0E00      	MOVLW       0
0x00B4	0x6E00      	MOVWF       R0 
0x00B6	0x501E      	MOVF        _value+1, 0 
0x00B8	0x5C00      	SUBWF       R0, 0 
0x00BA	0xE102      	BNZ         L__main16
0x00BC	0x501D      	MOVF        _value, 0 
0x00BE	0x0800      	SUBLW       0
L__main16:
0x00C0	0xE204      	BC          L_main8
L__main10:
;programa 15b.c,50 :: 		value--;                         //   decrementa el valor
0x00C2	0x0E01      	MOVLW       1
0x00C4	0x5E1D      	SUBWF       _value, 1 
0x00C6	0x0E00      	MOVLW       0
0x00C8	0x5A1E      	SUBWFB      _value+1, 1 
;programa 15b.c,51 :: 		}
L_main8:
;programa 15b.c,52 :: 		}
L_main5:
;programa 15b.c,53 :: 		DAC_Output(value);                   // Envía el valor al DAC
0x00CA	0xF01FC01D  	MOVFF       _value, FARG_DAC_Output_valueDAC
0x00CE	0xF020C01E  	MOVFF       _value+1, FARG_DAC_Output_valueDAC+1
0x00D2	0xDFC5      	RCALL       _DAC_Output
;programa 15b.c,54 :: 		Delay_ms(1);
0x00D4	0x0E03      	MOVLW       3
0x00D6	0x6E0C      	MOVWF       R12, 0
0x00D8	0x0E97      	MOVLW       151
0x00DA	0x6E0D      	MOVWF       R13, 0
L_main9:
0x00DC	0x2E0D      	DECFSZ      R13, 1, 0
0x00DE	0xD7FE      	BRA         L_main9
0x00E0	0x2E0C      	DECFSZ      R12, 1, 0
0x00E2	0xD7FC      	BRA         L_main9
0x00E4	0x0000      	NOP
0x00E6	0x0000      	NOP
;programa 15b.c,55 :: 		}
0x00E8	0xD7D7      	BRA         L_main0
;programa 15b.c,56 :: 		}
L_end_main:
0x00EA	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [48]    _SPI1_Init
0x004C      [18]    _SPI1_Write
0x005E      [30]    _DAC_Output
0x007C      [18]    _InitMain
0x008E      [94]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [4]    _SPI_Rd_Ptr
0x0019       [4]    _SPI_Wr_Ptr
0x001D       [2]    _value
0x001F       [2]    FARG_DAC_Output_valueDAC
0x0021       [1]    FARG_SPI1_Write_data_
0x0F81       [0]    RB1_bit
0x0F81       [0]    RB0_bit
0x0F82       [0]    Chip_Select
0x0F82       [0]    RC0_bit
0x0F93       [0]    TRISB0_bit
0x0F93       [0]    TRISB1_bit
0x0F94       [0]    Chip_Select_Direction
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    TRISC3_bit
0x0FC1       [1]    ADCON1
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [0]    NOT_RBPU_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Label List: ** 
//----------------------------------------------
  L_main0
  L_main1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L__main10
  L__main11
  L_end_InitMain
  _InitMain
  L_end_DAC_Output
  _DAC_Output
  L_end_main
  _main
  L__main15
  L__main16
  L_SPI1_Init_Advanced0
  L_SPI1_Init_Advanced1
  L_SPI1_Init_Advanced2
  L_SPI1_Init_Advanced3
  L_SPI1_Init_Advanced4
  L_SPI1_Init_Advanced5
  L_SPI1_Read6
  L_SPI1_Read7
  L_SPI1_Write8
  L_SPI1_Write9
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
